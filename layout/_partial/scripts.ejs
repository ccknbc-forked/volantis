<%- js('https://cdn.jsdelivr.net/npm/jquery@3.5/dist/jquery.min.js') %>

<% if (theme.search && theme.search.enable) { %>
  <script>
    <% if(theme.search.service === 'baidu') { %>
      var BAIDU_API_ID = "<%- theme.search.baidu.apiId %>";
    <%} else if(theme.search.service === 'algolia') { %>
      var ALGOLIA_API_KEY = "<%- theme.search.algolia.apiKey %>";
      var ALGOLIA_APP_ID = "<%- theme.search.algolia.applicationID %>";
      var ALGOLIA_INDEX_NAME = "<%- theme.search.algolia.indexName %>";
    <%} else if(theme.search.service === 'azure') { %>
      var AZURE_QUERY_KEY = "<%- theme.search.azure.queryKey %>";
      var AZURE_INDEX_NAME = "<%- theme.search.azure.indexName %>";
      var AZURE_SERVICE_NAME = "<%- theme.search.azure.serviceName %>";
    <%} else if(theme.search.service === 'google') { %>
      var GOOGLE_CUSTOM_SEARCH_API_KEY = "<%- theme.search.google.apiKey %>";
      var GOOGLE_CUSTOM_SEARCH_ENGINE_ID = "<%- theme.search.google.engineId %>";
    <%}%>
    var SEARCH_SERVICE = "<%- theme.search.service %>" || "hexo";
    var ROOT = "<%- config.root %>" || "/";
    if (!ROOT.endsWith('/')) ROOT += '/';
  </script>
<% } %>

<% if (theme.plugins.instant_page) { %>
  <script async src="<%- theme.plugins.instant_page %>" type="module" defer integrity="sha384-OeDn4XE77tdHo8pGtE1apMPmAipjoxUQ++eeJa6EtJCfHlvijigWiJpD7VDPWXV1"></script>
<% } %>

<% if (theme.plugins.backstretch && theme.plugins.backstretch.enable && (theme.plugins.backstretch.images || page.images)) { %>
  <% var imgs = theme.plugins.backstretch.images || page.images; %>
  <% var posi = null;
  if (theme.plugins.backstretch.position == 'cover') {
    posi = '.cover';
  }
   %>
  <% if (imgs != undefined && theme.plugins.backstretch.position != undefined){ %>
    <%- js(theme.plugins.backstretch.js) %>
    <script type="text/javascript">
      $(function(){
        var imgs=<%- '["' + imgs.join('", "') + '"]' %>;
        if ('<%- theme.plugins.backstretch.shuffle %>' == 'true') {
          function shuffle(arr){
            /*From countercurrent-time*/
            var n = arr.length;
            while(n--) {
              var index = Math.floor(Math.random() * n);
              var temp = arr[index];
              arr[index] = arr[n];
              arr[n] = temp;
            }
          }
          shuffle(imgs);
        }
        if ('<%- posi %>') {
          $('<%- posi %>').backstretch(
            imgs,
          {
            duration: "<%- theme.plugins.backstretch.duration %>",
            fade: "<%- theme.plugins.backstretch.fade %>"
          });
        } else {
          $.backstretch(
            imgs,
          {
            duration: "<%- theme.plugins.backstretch.duration %>",
            fade: "<%- theme.plugins.backstretch.fade %>"
          });
        }
      });
    </script>
  <% } %>
<% } %>

<% if (theme.plugins.aplayer && theme.plugins.aplayer.enable && theme.plugins.aplayer.js) { %>
  <script>
    let APlayerController = new Object();
    APlayerController.id = '<%= theme.plugins.aplayer.id %>';  // 设定全局音乐播放ID
    APlayerController.volume = '<%= theme.plugins.aplayer.volume %>';
  </script>
  <% (theme.plugins.aplayer.js||[]).forEach(function(item){ %>
    <%- js({src:item}) %>
  <% }) %>
<% } %>


<% if (theme.comments.service && theme.comments.service.length > 0) { %>
  <%- partial('../_third-party/comments/' + theme.comments.service + '/script') %>
<% } %>


<!-- darkmodejs -->
<% if (theme.plugins.darkmodejs.enable) { %>
  <%- js({src: theme.plugins.darkmodejs.js,aysc:true}) %>
  <script type="text/javascript">
	function getClientHeight(){
	  var clientHeight=0;
	  if(document.body.clientHeight&&document.documentElement.clientHeight){
	  var clientHeight = (document.body.clientHeight<document.documentElement.clientHeight)?document.body.clientHeight:document.documentElement.clientHeight;
	  }else{
	  var clientHeight = (document.body.clientHeight>document.documentElement.clientHeight)?document.body.clientHeight:document.documentElement.clientHeight;
	  }
	  return clientHeight;
	}
	function supportCss3(style) {
		var prefix = ['webkit', 'Moz', 'ms', 'o'],
		i,
		humpString = [],
		htmlStyle = document.documentElement.style,
		_toHumb = function (string) {
		return string.replace(/-(\w)/g, function ($0, $1) {
		return $1.toUpperCase();
		});
		};
		for (i in prefix)
		humpString.push(_toHumb(prefix[i] + '-' + style));
		humpString.push(_toHumb(style));
		for (i in humpString)
		if (humpString[i] in htmlStyle) return true;
		return false;
	};
	//配置信息
	var options = {
	  bottom: '<%- theme.plugins.darkmodejs.bottom %>',
	  right: '<%- theme.plugins.darkmodejs.right %>',
	  left: '<%- theme.plugins.darkmodejs.left %>',
	  time: '<%- theme.plugins.darkmodejs.time %>',
	  mixColor: '<%- theme.plugins.darkmodejs.mixColor %>',
	  backgroundColor: '<%- theme.plugins.darkmodejs.backgroundColor %>',
	  buttonColorDark: '<%- theme.plugins.darkmodejs.buttonColorDark %>',
	  buttonColorLight: '<%- theme.plugins.darkmodejs.buttonColorLight %>',
	  saveInCookies: <%- theme.plugins.darkmodejs.saveInCookies %>,
	  label: '<%- theme.plugins.darkmodejs.label %>',
	  autoMatchOsTheme: <%- theme.plugins.darkmodejs.autoMatchOsTheme %>
	};
	// 卡片兼容处理 mix-blend-mode 与 effect: [shadow, floatable, blur] 冲突???
	function pjax_darkmodejs(){
		<% if (theme.plugins.darkmodejs.compatible) { %>
		if(!supportCss3('mix-blend-mode'))return;
		var checkExist2 = setInterval(function() {
		   if (typeof jQuery == 'undefined'){return;}
		   clearInterval(checkExist2);
		   var TopFlag=getClientHeight();
			$(window).scroll(function(){
				var top = $(document).scrollTop();
				if(top > TopFlag) {
					$(".darkmode-layer").css("mix-blend-mode","normal");
					$(".darkmode-layer").css("background-color","#000");
				}else{
					$(".darkmode-layer").css("mix-blend-mode","difference");
					$(".darkmode-layer").css("background-color","");
				}
			})
		}, 100);
		<% } %>
	}
	// mix-blend-mode support?
	if(supportCss3('mix-blend-mode')){
		const darkmode = new Darkmode(options);
		darkmode.showWidget();
		pjax_darkmodejs();
	}
  </script>
<% } %>

<!-- 复制 -->
<% if (theme.plugins.clipboard && (theme.style.body.highlight.copy_btn == true)) { %>
  <%- partial('_third-party/clipboard') %>
<% } %>

<!-- scrollreveal -->
<% if (theme.plugins.scrollreveal && theme.plugins.scrollreveal.js) { %>
  <script src="<%- theme.plugins.scrollreveal.js %>"></script>
  <script type="text/javascript">
    function pjax_scrollrebeal() {
      ScrollReveal().reveal('.l_main .reveal', {
        distance: '<%- theme.plugins.scrollreveal.distance %>',
        duration: '<%- theme.plugins.scrollreveal.duration %>',
        interval: '<%- theme.plugins.scrollreveal.interval %>',
        scale: '<%- theme.plugins.scrollreveal.scale %>',
        easing: 'ease-out'
      });
    }

    $(function () {
      pjax_scrollrebeal();
    });
  </script>
<% } %>
<!-- ******************************** -->

<!-- fancybox -->
<%- partial('_third-party/fancybox') %>
<!-- ******************************** -->

<% if (config.use_cdn && theme.info.cdn && theme.info.cdn.js) { %>
  <%- js(theme.info.cdn.js) %>
<% } else { %>
  <%- js(['js/app.js']) %>
<% } %>

<% if (theme.search && theme.search.enable) { %>
  <% if (theme.search.js) { %>
    <%- js(theme.search.js) %>
  <% } else { %>
    <%- js(['js/search.js']) %>
  <% } %>
<% } %>

<% if (theme.plugins.busuanzi) { %>
  <script defer src="<%- theme.plugins.busuanzi %>" data-pjax></script>
<% } %>

<% if (theme.plugins.nodewaves && theme.plugins.nodewaves.js) { %>
  <%- js({src: theme.plugins.nodewaves.js}) %>
  <script type="text/javascript">
    $(function () {
      Waves.attach('.flat-btn', ['waves-button']);
      Waves.attach('.float-btn', ['waves-button', 'waves-float']);
      Waves.attach('.float-btn-light', ['waves-button', 'waves-float', 'waves-light']);
      Waves.attach('.flat-box', ['waves-block']);
      Waves.attach('.float-box', ['waves-block', 'waves-float']);
      Waves.attach('.waves-image');
      Waves.init();
    });
  </script>
<% } %>

<% if (theme.plugins.comment_typing) { %>
  <%- js(theme.plugins.comment_typing) %>
<% } %>

<% if (theme.plugins.message) { %>
  <%- js(theme.plugins.message) %>
<% } %>

<% if (config.highlight.enable != true) { %>
  <% if (theme.plugins.highlightjs && theme.plugins.highlightjs.js) { %>
    <%- js(theme.plugins.highlightjs.js) %>
    <script>hljs.initHighlightingOnLoad();</script>
  <% } %>
<% } %>

<% if (config.import && config.import.script){ %>
<% (config.import.script||[]).forEach(function(item){ %>
<%- item %><% }) %>
<% } %>

<script>
  $(document).ready(function () {
    setCookie("canplay", 'true', '', '/');  // 用以控制音乐播放
    var autoPlayMusic = getCookie('autoPlayMusic') == null ? true : false;
    <% if (theme.plugins.aplayer.enable == true && theme.plugins.aplayer.autoplay == true) { %>
    setTimeout(function() {
      if($(window).width() > 500 && autoPlayMusic) {
        var isplay = true;
        $.message({title: "音乐通知",message: "即将自动播放，点击<a id='stopMusic' class='stopMusic fix-cursor-pointer'>停止播放</a>",type:'warning'});
        setTimeout(function() {
          try{
            var aplayer = document.querySelector('meting-js').aplayer;
            var index = aplayer.list.index;
            var title = aplayer.list.audios[index].title;
            var artist = aplayer.list.audios[index].artist;
            var canplay = getCookie('canplay') == null ? false : getCookie('canplay');
            if (window.aplayerLinster == undefined) { // 避免重复监听
              aplayerOn();
            }
            if(isplay && canplay == 'true') {
              document.querySelector('meting-js').aplayer.play();
            }
          } catch (error) { // 主要用于捕捉 js 加载失败
            setCookie("canplay", 'false', '', '/');
            $.message({title:'音乐通知',message: '加载失败，已取消播放操作~', type:'warning'});
          }
        }, 3500);
        $("#stopMusic").click(function() {
          isplay = false;
          $(".c-message--close").click();
          setTimeout(() => {
            $.message({title: "音乐通知",time: 999999,message: "是否永久关闭音乐自动播放?  <a id='dontPlayMusic' class='stopMusic fix-cursor-pointer'><b>确认</b></a>",type:'warning'});
            $("#dontPlayMusic").click(function() {
              var expires = 7 * 24 * 60 * 60 * 1000;
              setCookie("autoPlayMusic", 'false', expires, '/');
              $(".c-message--close").click();
              setTimeout(() => {
                $.message({title:'音乐通知',time: 6000,message: '关闭成功，未来一周内将不再提醒~', type:'success'});
              }, 1000);
            });
          }, 1000);
        })
      } else {
        setTimeout(() => {
          if (window.aplayerLinster == undefined) { // 避免重复监听
            deleteCookie('canplay', '/'); // 删除
            aplayerOn();
          }
        }, 1500);
      }
    }, 1500);
    <% } %>
  });

  <% if (theme.plugins.aplayer.enable == true) { %>
  function aplayerOn() {
    window.aplayerLinster = true;
    try {
      document.querySelector('meting-js').aplayer.on('canplay', function (e) { // 近似于 play 事件，重置 cookie 状态
        setCookie("canplay", 'true', '', '/');
      });
      document.querySelector('meting-js').aplayer.on('error', function (e) { // 音乐加载失败
        $.message({title: "音乐通知",message: "音乐加载失败~ 潜在网络问题",type:'warning'});
        setCookie("canplay", false, '', '/');
      });
      document.querySelector('meting-js').aplayer.on('play', function (e) {
        var index = document.querySelector('meting-js').aplayer.list.index;
        var title = document.querySelector('meting-js').aplayer.list.audios[index].title;
        var artist = document.querySelector('meting-js').aplayer.list.audios[index].artist;
        $.message({title:'音乐通知',message: '正在播放：' + title + ' - ' + artist, type:'success'});
        setCookie("canplay", 'true', '', '/');
      });
    } catch (error) {
      setCookie("canplay", 'false', '', '/');
      delete window.aplayerLinster;
      $.message({title:'音乐通知',message: '事件监听失败~', type:'warning'});
    }
  }
  <% } %>
</script>
